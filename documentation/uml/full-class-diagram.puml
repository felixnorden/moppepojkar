@startuml

package moped {

	package core {
		
		class Main {
			+ {static}main(String[] args): void
		
		}
		
		package behaviour_states {
		
			class StateController {
				- currentState: BehaviourState

				.. Setters ..
				+ setNewState(BehaviourState newState): void

				.. Getters ..
				+ getCurrentState(): State

				.. Methods ..

			}

			package states {

				interface BehaviourStateFactory {
					createManualBehaviour(): BehaviourState
					createAdaptiveCruiseControlBehaviour(): BehaviourState
				}

				interface BehaviourState {
					run(double deltaTime): void
				}
			
				class Manual {
					- controller: RemoteController
				}

				class BehaviourStateFactoryImpl {

				}
				
				class AdaptiveCruiseControl {
					- currentActionStrategy: ActionStrategy
					- pidStrategy: ActionStrategy
					- emgyStopStrategy: ActionStrategy

					- determineStrategy(): ActionStrategy

				}
				
				Manual --|> BehaviourState
				AdaptiveCruiseControl --|> BehaviourState
				BehaviourStateFactoryImpl --|> BehaviourStateFactory
			}
		
			
			StateController --> BehaviourState
		}			

		package action_strategies {

			interface ActionStrategyFactory {
				createPidParser(): ActionStrategy
				createEmgyStop(): ActionStrategy
				createRemoteController(): ActionStrategy
			}

			interface ActionStrategy {
				takeAction(double deltaTime) : double
			}

			class ActionStrategyFactoryImpl{
				- appsocket: ExternalCommunicator
				- DistanceSensorImpl: Sensor
			}

			class PidParser {
				- pid: PID
				
				- calcPIDVal(double deltaTime): float
			}
			class EmgyStop {
				- defaultValue: int
			}
			
			class RemoteController {
				- appSocket: ExternalCommunicator
				- filteredValue: int

                + RemoteController(Axis selectedAxis)
			}

			enum Axis {
			    AXIS_Y
			    AXIS_X
			}

			class BidirectionHandler {
                - ActionStrategy latitudeStrategy;
                - ActionStrategy longitudeStrategy;

                + StrategyDualComposite(ActionStrategy latitudeStrategy, ActionStrategy longitudeStrategy)

                + takeLatitudeAction(): double
                + takeLongitudeAction(): double
			}

                RemoteController --+ Axis

			    BidirectionHandler --> ActionStrategy
				PidParser --|> ActionStrategy
				EmgyStop --|> ActionStrategy
				RemoteController --|> ActionStrategy

                ActionStrategyFactoryImpl --> ActionStrategy
                ActionStrategyFactoryImpl --|> ActionStrategyFactory

			note top of PidParser
				DI sensor data reference
				in constructor
			end note
			
		}
		
		package car_control {
			
			interface CarControl {
				
				.. Getters ..
				getLastThrottle(): int
				getSteerValue(): int
	
				.. Setters ..
				setThrottleValue(int value): void
				setSteerValue(int value): void

			}

			class CarControlImpl {
				- lastThrottleValue: int
				- lastSteerValue: int
			}

			CarControlImpl --|> CarControl

		}

		package sensors {

            interface DistanceSensor {
                getCurrentValue()
            }

		    class DistanceSensorImpl {
		        + getCurrentValue() : int

		    }

		}

		package process_runner {

		    class ProcessFactory {

		    }

		    class ProcessRunnerImpl {

		    }

		    interface ProcessRunner

		    interface InputSubscriber {

		    }

		    class StreamReader {

		    }

            StreamReader --> InputSubscriber
            ProcessRunnerImpl --|> ProcessRunner
		    ProcessFactory --> ProcessRunner
		}

		Main ..> states

        action_strategies --> sensors
        sensors --> process_runner
		car_control --> process_runner
		states --> action_strategies
		states --> car_control
	}
	
	package com_io {

		enum Direction {
			Internal
			External
		}
		
		interface DataReceiver {
			dataRecieved(int[] data, Direction direction): void
		}

		interface CommunicationsMediator {
			transmitData(int[] data, Direction direction): void
			subscribe(InputReceiver receiver, Direction direction): void
			unsubscribe(InputReceiver receiver): void
		}
		
		class CommunicatorFactory {
			- comInstance: CommunicationsMediator

			.. Getters ..
			+getComInstance():  ExternalCommunicator
		}
		
		class CommunicationsMediatorImpl {
			- Map<DataReceiver> subscribers
			- directPacket(int[] data, Direction direction)
		}
		
		CommunicationsMediator --> DataReceiver
		

		CommunicatorFactory ..> CommunicationsMediator
		CommunicatorFactory ..> CommunicationsMediatorImpl
		
		
	}

	package pid {
		
		class PID{

		}
	}

	package communication_protocols {
	
	}

    action_strategies --> pid
	app --> communication_protocols
	behaviour_states --> communication_protocols
	core --> com_io	
}

package app {

}

@enduml
