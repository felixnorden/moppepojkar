@startuml

package moped {

	package core {
		
		class Main {
			+ {static}main(String[] args): void
		
		}
		
		package bahaviour_states {
		
			class StateController {
				- currentState: BehaviourState

				.. Setters ..
				+ setNewState(BehaviourState newState): void

				.. Getters ..
				+ getCurrentState(): State

				.. Methods ..

			}

			package states {

				interface BehaviourStateFactory {
					createManualBehaviour(): BehaviourState
					createAdaptiveCruiseControlBehaviour(): BehaviourState
				}

				interface BehaviourState {
					run(double deltaTime): void
				}
			
				class Manual {
					- controller: RemoteController
				}

				class BehaviourStateFactoryImpl {

				}
				
				class AdaptiveCruiseControl {
					- currentActionStrategy: ActionStrategy
					- pidStrategy: ActionStrategy
					- emgyStopStrategy: ActionStrategy

					- determineStrategy(): ActionStrategy

				}
				
				Manual --|> BehaviourState
				AdaptiveCruiseControl --|> BehaviourState
				BehaviourStateFactoryImpl --|> BehaviourStateFactory
			}
		
			
			StateController --> BehaviourState
		}			

		package action_strategies {

			interface ActionStrategyFactory {
				createPidParser(): ActionStrategy
				createEmgyStop(): ActionStrategy
				createRemoteController(): ActionStrategy
			}

			interface ActionStrategy {
				takeAction(double deltaTime) : void
			}

			class ActionStrategyFactoryImpl{
				- appsocket: ExternalCommunicator
				- distanceSensor: Sensor
			}

			class PidParser {
				- pid: PID
				
				- calcPIDVal(double deltaTime): float
			}
			class EmgyStop {
				- defaultThrottle: int
				- defaultSteer: int
			}
			
			class RemoteController {
				- appSocket: ExternalCommunicator
				- steerValue: int
				- throttleValue: int
			}
			
				PidParser --|> ActionStrategy
				EmgyStop --|> ActionStrategy
				RemoteController --|> ActionStrategy
				RemoteController --|> InputReceiver

			note top of PidParser
				DI sensor data reference
				in constructor
			end note
			
		}
		
		package car_control {
			
			interface CarControl {
				
				.. Getters ..
				getLastThrottle(): int
				getSteerValue(): int
	
				.. Setters ..
				setThrottleValue(int value): void
				setSteerValue(int value): void

			}

			class CarControlImpl {
				- lastThrottleValue: int
				- lastSteerValue: int
			}

			CarControlImpl --|> CarControl

		}
		
		Main ..> states
		
		states --> strategies
		strategies --> car_control
	}
	
	package com_io {

		package ext_com {
			
			interface Observer {
			
			}
			
			interface ExternalCommunicator {
				
			}
			
			interface InputReceiver {
				externalDataRecieved(inputData: ComProtocol)
			}
			
			interface OutputObserver {
				
			}
			
			class CommunicatorFactory {
				- extComInstance: ExternalCommunicator

				.. Getters ..
				+getExtComInstance():  ExternalCommunicator
			}
			
			class ExternalCommunications {
				- 
			}
			
			ExternalCommunications --> Observer
			ExternalCommunications --|> ExternalCommunicator
			
			ExternalCommunications --> OutputObserver
			ExternalCommunications --|> InputReceiver
			
			CommunicatorFactory ..> ExternalCommunicator
			CommunicatorFactory ..> ExternalCommunications
			
		}
		
		package int_com {
		
		}
	
	}

	package pid {
		
		class PID{

		}
	}

	package communication_protocols {
	
	}
	
	app --> communication_protocols
	moped --> communication_protocols
	
	core --> com_io
	
}

package app {

}

@enduml
